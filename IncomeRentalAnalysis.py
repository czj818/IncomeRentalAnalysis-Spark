# -*- coding: utf-8 -*-
"""SI618-Project-Part1-czj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-XxfyWTky2WS_b6tFAFSou4ls2VrYnrK

## Mount Drive
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd '/content/drive/My Drive/SI618/pj'

"""## Convert CSV to JSON"""

import json, csv

file = csv.DictReader(open('price.csv'))
with open('price.json','w') as f:
  for d in file:
    json.dump(d,f)
    f.write('\n')

file = csv.DictReader(open('kaggle_income.csv',  encoding='latin-1'))
with open('income.json','w') as f:
  for d in file:
    json.dump(d,f)
    f.write('\n')

import numpy as np
import pandas as pd

"""## Code in Spark"""

import json
from pyspark import SparkContext
from pyspark.sql import *
sc = SparkContext.getOrCreate()
sqlContext = SQLContext(sc)

price_file = sc.textFile("hdfs:///user/czj/price.json")

def get_price(data):
  info_list = []
  county = data.get('County', None)
  recent_price = data.get('January 2017', None)
  if county:
    if recent_price != None:
      price = float(recent_price)
      info_list.append((county, price))
  return info_list

cat_price = price_file.map(lambda line:json.loads(line)).flatMap(get_price).mapValues(lambda x: (x,1)).reduceByKey(lambda x, y: (x[0] + y[0], x[1] + y[1])).map(lambda x: (x[0], x[1][0]/x[1][1])).sortBy(lambda x: -x[1])

cat_price.collect()
#cat_price.map(lambda t: str(t[0]) + '\t' + str(t[1])).saveAsTextFile("avg_rent_per_county_output")


schemaString = "county avg_rent"
from pyspark.sql.types import *
fields = [StructField(field_name, StringType(), True) for field_name in schemaString.split()]
schema = StructType(fields)
rentdf = sqlContext.createDataFrame(cat_price,schema)
rentdf.registerTempTable('rent')

qrent = sqlContext.sql('select * from rent')
qrent.write.format('csv').option('delimiter','\t').save('rent')

income_file = sc.textFile("hdfs:///user/czj/income.json")
def get_income(data):
  m_list = []
  county = data.get('County', None)
  income = data.get('Median', None)
  if county:
    if income != None:
      income = float(income)
      if income != 0:
        county = county.replace(' County','')
        m_list.append((county, income))
  return m_list

cat_income = income_file.map(lambda line:json.loads(line)).flatMap(get_income).mapValues(lambda x: (x,1)).reduceByKey(lambda x, y: (x[0] + y[0], x[1] + y[1])).map(lambda x: (x[0], x[1][0]/x[1][1])).mapValues(lambda x: x/12).sortBy(lambda x: -x[1])

cat_income.collect()


schemaString2 = "county avg_income"
fields2 = [StructField(field_name, StringType(), True) for field_name in schemaString2.split()]
schema2 = StructType(fields2)
incomedf = sqlContext.createDataFrame(cat_income,schema2)
incomedf.registerTempTable('income')

qq = sqlContext.sql("select r.county, r.avg_rent avg_rent, i.avg_income from rent r join income i on r.county = i.county order by CAST(avg_rent as int) desc")
qq.show()

cat_income_filtered = income_file.map(lambda line:json.loads(line)).flatMap(get_income).mapValues(lambda x: (x,1)).reduceByKey(lambda x, y: (x[0] + y[0], x[1] + y[1])).filter(lambda x: x[1][1] > 1 ).map(lambda x: (x[0], x[1][0]/x[1][1])).mapValues(lambda x: x/12).sortBy(lambda x: -x[1])

cat_income_filtered.collect()
schemaString2 = "county avg_income"
fields2 = [StructField(field_name, StringType(), True) for field_name in schemaString2.split()]
schema2 = StructType(fields2)
incomedf = sqlContext.createDataFrame(cat_income_filtered,schema2)
incomedf.registerTempTable('income_filtered')
qincome = sqlContext.sql('select * from income_filtered')
qincome.write.format('csv').option('delimiter','\t').save('income')


q1 = sqlContext.sql("select r.county, r.avg_rent, i.avg_income, (r.avg_rent/i.avg_income) as ratio from rent r join income_filtered i on r.county = i.county order by ratio desc ")
q1.write.format('csv').option('delimiter','\t').save('pj_ratio')

"""## Visualization"""

df = pd.read_csv('rent.csv', sep = '\t', header = None)
df = df.rename(columns = {0:'county', 1:'rent'})

df.head()

import matplotlib.pyplot as plt

height = df.rent.to_list()[0:5]
bars = ('Marin County', 'San Mateo County', 'Glynn County', 'Santa Clara County', 'San Francisco County')
y_pos = np.arange(len(bars))

 
# Create horizontal bars
plt.barh(y_pos, height, color=(0.1, 0.1, 0.1, 0.1),  edgecolor='blue')
 
# Create names on the y-axis
plt.yticks(y_pos, bars)
plt.xlabel('Average Rent')
plt.title('The average rental price in Top Five county')
# Show graphic
plt.show()

df_i = pd.read_csv('income.csv', sep = '\t', header = None)

df_i = df_i.rename(columns = {0:'county', 1:'income'})

df_i[df_i.county=='Marin']

df_i[df_i.county=='San Mateo']

df.head()

from tabulate import tabulate
print(tabulate([['Marin', 5907, 9902], ['San Mateo', 5389, 6346], ['Santa Clara', 4562, 8438]], headers=['County', 'Rental Price', 'Income'], tablefmt='orgtbl'))

df_i.income.describe()

ratio = pd.read_csv('ratio.csv', sep = '\t', header = None)
ratio = ratio.rename(columns={0: 'county', 1: 'rent', 2:'income', 3:'ratio'})

ratio.tail(100)

ratio.ratio.describe()

rnt = ratio.rent.to_list()
inc = ratio.income.to_list()

plt.scatter(inc, rnt, c = 'lightblue')
plt.xlabel('average income per county')
plt.ylabel('average rental price per county')
plt.title('Income vs. Rental Price for each county')
plt.show()

